# code: language=ansible
---
- name: Install K3S Requirements
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - policycoreutils
    state: present

# To make sure the the role is idempotent. The tasks after this will only be executed if K3S hasn't been installed already.
- name: Check if K3S is already installed
  ansible.builtin.shell:
    cmd: 'test -f /usr/local/bin/k3s'
  register: k3s_installed
  failed_when: false

- name: Check if ArgoCD is already installed
  ansible.builtin.shell:
    cmd: 'kubectl get namespace argocd'
  register: argocd_installed
  failed_when: false

- name: Download K3s installation script
  ansible.builtin.uri:
    url: 'https://get.k3s.io'
    method: GET
    return_content: yes
    dest: '/tmp/k3s_install.sh'
  when: k3s_installed.rc != 0

- name: Import K3S Token
  ansible.builtin.include_vars:
    file: k3s-secrets.yml
  when: k3s_installed.rc != 0

# Note that the node_type variable is set in the inventory file
- name: Execute K3s installation script [Initial Master Node]
  ansible.builtin.shell:
    cmd: 'sh /tmp/k3s_install.sh --token {{ k3s_token }} --disable=traefik --flannel-backend=vxlan --cluster-init'
  vars:
    k3s_token: '{{ k3s_token }}'
  args:
    executable: /bin/bash
  when: node_type | default('undefined') == 'k3s_initial_master' and k3s_installed.rc != 0

# - name: Execute K3s installation script [Master Nodes]
#   ansible.builtin.shell:
#     cmd: 'sh /tmp/k3s_install.sh --token {{ k3s_token }} --disable=traefik --flannel-backend=vxlan --server https://{{ hostvars["k3s-master-1"]["ansible_default_ipv4"]["address"] }}:6443'
#   vars:
#     k3s_token: '{{ k3s_token }}'
#   args:
#     executable: /bin/bash
#   when: node_type | default('undefined') == 'k3s_master' and k3s_installed.rc != 0

- name: Execute K3s installation script [Worker Nodes]
  ansible.builtin.shell:
    cmd: 'sh /tmp/k3s_install.sh agent --token {{ k3s_token }} --server https://{{ hostvars["k3s-master-1"]["ansible_default_ipv4"]["address"] }}:6443'
  vars:
    k3s_token: '{{ k3s_token }}'
  args:
    executable: /bin/bash
  when: node_type | default('undefined') == 'k3s_agent' and k3s_installed.rc != 0

- name: Install ArgoCLI
  ansible.builtin.shell:
    cmd: 'curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd && rm argocd-linux-amd64'
  vars:
    k3s_token: '{{ k3s_token }}'
  args:
    executable: /bin/bash
  when: node_type | default('undefined') == 'k3s_initial_master' and argocd_installed.rc != 0

- name: Install ArgoCD
  ansible.builtin.shell:
    cmd: 'sudo chmod 644 /etc/rancher/k3s/k3s.yaml && kubectl create namespace argocd && kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml'
  vars:
    k3s_token: '{{ k3s_token }}'
  args:
    executable: /bin/bash
  when: node_type | default('undefined') == 'k3s_initial_master' and argocd_installed.rc != 0

- name: Check if ArgoCD is running
  ansible.builtin.shell:
    cmd: "kubectl wait -n argocd --for=jsonpath='{.status.phase}'=Running pod/argocd-application-controller-0"
  register: argocd_running
  failed_when: false

- name: Install ArgoCD App of Apps
  ansible.builtin.shell:
    cmd: 'argocd login cd.argoproj.io --core && export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && sudo kubectl config set-context --current --namespace=argocd && argocd app create apps --dest-namespace argocd --dest-server https://kubernetes.default.svc --repo https://github.com/jgeissler14/homelab.git --path apps  && argocd app sync apps'
  vars:
    k3s_token: '{{ k3s_token }}'
  args:
    executable: /bin/bash
  when: node_type | default('undefined') == 'k3s_initial_master' and argocd_running.rc == 0